package com.onerivet.deskbook.service.impl;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.onerivet.deskbook.exception.DataNotFoundException;
import com.onerivet.deskbook.model.entity.Employee;
import com.onerivet.deskbook.model.payload.EmployeeDto;
//import com.onerivet.deskbook.model.payload.UpdateUserDto;
import com.onerivet.deskbook.repository.EmployeeRepository;
import com.onerivet.deskbook.service.EmployeeService;

@Service
public class EmployeeServiceImpl implements EmployeeService{

	@Autowired
	private EmployeeRepository employeeRepository;
	
	@Autowired
	private ModelMapper modelMapper;
	
	@Override
	public List<EmployeeDto> getAllEmployee() {
		return employeeRepository.findAll().stream().map(this::employeeToEmployeeDto).collect(Collectors.toList());
	}
		@Override
		public EmployeeDto getEmployeeById(int id) {
		Employee employee = employeeRepository.findById(id).orElseThrow(()-> new DataNotFoundException("User Not Found") );
		return this.employeeToEmployeeDto(employee);
	}	
		@Override
		public EmployeeDto updateEmployeebyId(EmployeeDto employeeDto, int id) {
			
				
			Employee employee = employeeRepository.findById(id).orElseThrow(()-> new DataNotFoundException("User Not Found") );
			Employee employee1 = this.modelMapper.map(employeeDto, Employee.class);
			employee.setFname(employee1.getFname());
			employee.setLname(employee1.getLname());
			employee.setPhoneNumber(employee1.getPhoneNumber());
			employee.setProfilePictureFileName(employee1.getProfilePictureFileName());
			employee.setProfilePictureFilePath(employee1.getProfilePictureFilePath());
			employee.setProject(employee1.getProject());
			employee.setDesignationId(employee1.getDesignationId());
			employee.setModeOfWorkId(employee1.getModeOfWorkId());
				
			
			Employee saveEmployee = employeeRepository.save(employee);
			return this.employeeToEmployeeDto(saveEmployee,id);
			
								
				//EmployeeDto employeeById = getEmployeeById(id);
				//employeeToEmployeeDto(employeeById);
				
//				if(employeeById!=null) {
//					Employee employee = employeeRepository.save(employeeDtoToEmployee(employeeDto));
//					System.out.println(employee);
//					return  new ResponseEntity<EmployeeDto>(this.modelMapper.map(employee, EmployeeDto.class),HttpStatus.OK);
//				}else{
//					throw new DataNotFoundException("Data Not Found");
//				}
		}
		
		public Employee employeeDtoToEmployee(EmployeeDto employeeDto)
		{
			Employee employee = this.modelMapper.map(employeeDto, Employee.class);
			return employee;
		}
		
		public EmployeeDto employeeToEmployeeDto(Employee employee)
		{
			EmployeeDto employeedto = this.modelMapper.map(employee,EmployeeDto.class);
			return employeedto;
		}
		
//		public Employee updateModelMapper(UpdateUserDto updateUserDto) {
//			return modelMapper.map(updateUserDto, Employee.class);
//		}
}
